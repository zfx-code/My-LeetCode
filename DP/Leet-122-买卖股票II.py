"""
Leet-122-买卖股票II

给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。

在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。

返回你能获得的最大利润, 没有正利润返回0 。

示例 1：

输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
     总利润为 4 + 3 = 7 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     总利润为 4 。
示例 3：
"""

class Solution:
    def maxProfit(self, prices: list[int]) -> int:
        n = len(prices)

        """
        维护dp状态
        dp[i][0]: 第i天结束时, 手中[不持有]股票的最大利润
        dp[i][1]: 第i天结束时, 手中[持有]股票的最大利润
        """
        inf = float("inf")
        # 多初始化1位, 使得状态能更新下去
        dp = [[0, 0] for i in range(n + 1)]
        # 保持第一天"买入"操作能够执行下去
        # 否则买入没有扣钱, eg: prices[0] = 2, 应该利润是-2
        dp[0][1] = -inf

        for i in range(1, n + 1):
            # i-1没有, 保持 or i-1有卖出, 注意prices[i-1]是第i天的价格
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i - 1])
            # i-1有, 保持   or i-1没有买入, 注意prices[i-1]是第i天的价格
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i - 1])
        
        return dp[n][0]


s = Solution()
prices = [6,1,3,2,4,7]
s.maxProfit(prices=prices)







