"""
150. 逆波兰表达式求值

你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。

请你计算该表达式。返回一个表示表达式值的整数。

注意：

有效的算符为 '+'、'-'、'*' 和 '/' 。
每个操作数（运算对象）都可以是一个整数或者另一个表达式。
两个整数之间的除法总是 向零截断 。
表达式中不含除零运算。
输入是一个根据逆波兰表示法表示的算术表达式。
答案及所有中间计算结果可以用 32 位 整数表示。
 

示例 1：

输入：tokens = ["2","1","+","3","*"]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
示例 2：

输入：tokens = ["4","13","5","/","+"]
输出：6
解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
示例 3：

输入：tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
输出：22
解释：该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 
逆波兰表达式：

逆波兰表达式是一种后缀表达式，所谓后缀就是指"算符写在后面"。

(1) 平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
(2) 该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
逆波兰表达式主要有以下两个优点：

(1) 去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
(2) 适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中
"""

class Solution:
    def evalRPN(self, tokens: list[str]) -> int:
        """
        关键思路
        (1) 运算符放在运算对象后
        (2) 左->右, 数字push, 运算pop出2个数计算后再push
        重复(2)
        """
        stack = []

        for token in tokens:
            print(stack, token)
            # 整数
            if token not in ["+", "-", "*", "/"]:
                stack.append(int(token))
                continue 
            # 运算
            num2 = stack.pop()
            num1 = stack.pop()
            if token == "+":
                stack.append(num1 + num2) 
            elif token == "-":
                stack.append(num1 - num2)
            elif token == "*":
                stack.append(num1 * num2)
            else:
                # 考虑负数
                sign = 1 if num1 * num2 > 0 else -1
                stack.append(sign * (abs(num1) // abs(num2)))
        return stack.pop()
    
s = Solution()

print(s.evalRPN(tokens=["10","6","9","3","+","-11","*","/","*","17","+","5","+"]))