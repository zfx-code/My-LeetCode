"""
31. 下一个排列

整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。

例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。

例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。

必须 原地 修改，只允许使用额外常数空间。

 

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]
"""

class Solution:
    def nextPermutation(self, nums: list[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """

        """
        eg: [2, 6, 3, 5, 4, 1]
        根据当前排列计算下一个排列, 2次遍历
        从后往前走, 找到正序对, 表示可以通过交换为逆序对变成更大的排列
            (1) 找到[3, 5], 标记这个"3", 因为 3 < 5 
            (2) 从找3之后第1个比3大的数, 是4不是5(要保证新排列是更大, 但是更大的里的最小)
                ! 同样从后往前, 这样能保证第一个找到的是>3且最小的
            (3) 交换[3, 4], 随后将原本3之后的位按照正序排(保证最小), 实际只需要完全逆序就好了
            (4) 结果为2, 6, 4, 1, 3, 5
        如果从后往前走的过程都没有正序对, 返回1-n这个最小排列即可

        """
        n = len(nums)

        # (1)
        idx = -1
        for i in range(n - 1, 0, -1):
            # 找到了对应的i
            if nums[i - 1] < nums[i]:
                idx = i - 1 
                break 

        if idx == -1:
            # nums.sort()
            nums.reverse()
            return

        # (2) 找更小的交换j, nums[j]
        for j in range(n - 1, idx, -1):
            if nums[j] > nums[idx]:
                nums[idx], nums[j] = nums[j], nums[idx]
                break

        # 逆转[idx + 1, n), 一旦重复就不一定了
        nums[idx + 1:] = nums[idx + 1:][::-1]
        

nums = [2,3,1,3,3]
nums = [3,2,1]

s = Solution()

s.nextPermutation(nums=nums)

print(nums)

# print(sorted(nums))



